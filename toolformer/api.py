# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_api.ipynb.

# %% auto 0
__all__ = ['BaseAPI', 'CalculatorAPI', 'WolframAPI', 'WeatherAPI', 'TemperatureAPI', 'CalendarAPI']

import random
import json
# %% ../nbs/03_api.ipynb 4
from abc import abstractclassmethod

import wolframalpha
from langchain import PromptTemplate

import pandas as pd
import sys
import subprocess
import requests

# %% ../nbs/03_api.ipynb 6
class BaseAPI:
    def __init__(
        self,
        name: str, # the name of the API call
        prompt_template: PromptTemplate,
        sampling_threshold: float = 0.2,
        filtering_threshold: float = 0.2,
    ):
        self.name = name
        self.prompt_template = prompt_template
        self.sampling_threshold = sampling_threshold
        self.filtering_threshold = filtering_threshold

    @abstractclassmethod
    def execute(self):
        pass
    
    def __call__(self, *args: str, **kargs: str) -> str:
        output = self.execute(*args, **kargs)
        return str(output)

# %% ../nbs/03_api.ipynb 8
class CalculatorAPI(BaseAPI):
    def execute(self, input: str) -> str:
        try:
            return eval(input)
        except:
            return ""

# %% ../nbs/03_api.ipynb 10
class WolframAPI(BaseAPI):
    def __init__(self, *args, api_key: str, **kargs):
        super().__init__(*args, **kargs)
        self.api_key = api_key
        
    def execute(self, input: str) -> str:
        client = wolframalpha.Client(self.api_key)
        res = client.query(input=input)
        return next(res.results).text

class BaseWeatherAPI(BaseAPI):
    def __init__(self, *args, api_key: str, **kargs):
        super().__init__(*args, **kargs)
        self.api_key = api_key
    
    def call_api (self, city: str):
        # Define the URL for the API call
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={self.api_key}&units=metric"

        # Make the API request
        response = requests.get(url)

        # Check if the request was successful
        if response.status_code == 200:
            data = response.json()
            return data
        else:
            raise ValueError("Invalid city name or API request failed")

class WeatherAPI(BaseWeatherAPI):
    def get_weather(self, city: str):
        data = self.call_api(city)
        weather = data['weather'][0]['main'] + ', ' + data['weather'][0]['description']
        return weather

    def execute(self, input: str) -> str:
        try:
            return str(self.get_weather(input))
        except Exception as e:
            return str(e)

class TemperatureAPI(BaseWeatherAPI):
    def get_temperature(self, city: str):
        data = self.call_api(city)
        temperature = data['main']['temp']
        return temperature
    
    def execute(self, input: str) -> str:
        try:
            return str(self.get_temperature(input))
        except Exception as e:
            return str(e)

# TODO: test outputs
class CalendarAPI(BaseAPI):
    def execute(self, input_type: str, **kwargs) -> str:
        try:
            base_url = 'http://127.0.0.1:5000/events'
            if input_type == 'add':
                title = kwargs.get('title')
                date = kwargs.get('date')
                description = kwargs.get('description')
                response = self.add_event(base_url, title, date, description)
            elif input_type == 'get_by_date':
                date = kwargs.get('date')
                response = self.get_events_by_date(base_url, date)
            else:
                return 'Invalid input_type specified'
            return response

        except Exception as e:
            return str(e)
      
    def add_event(self, base_url, title, date, description):
        url = base_url
        data = {
            'title': title,
            'date': date,
            'description': description
        }
        response = requests.post(url, json=data)
        return json.dumps(response.json(), indent=2), response.status_code

    def get_events_by_date(self, base_url, date):
        url = f'{base_url}/{date}'
        response = requests.get(url)
        return json.dumps(response.json(), indent=2), response.status_code