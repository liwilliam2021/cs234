# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_api.ipynb.

# %% auto 0
__all__ = ['BaseAPI', 'CalculatorAPI', 'WolframAPI']

import random
# %% ../nbs/03_api.ipynb 4
from abc import abstractclassmethod

import wolframalpha
from langchain import PromptTemplate

import pandas as pd
import sys
import subprocess

# %% ../nbs/03_api.ipynb 6
class BaseAPI:
    def __init__(
        self,
        name: str, # the name of the API call
        prompt_template: PromptTemplate,
        sampling_threshold: float = 0.2,
        filtering_threshold: float = 0.2,
    ):
        self.name = name
        self.prompt_template = prompt_template
        self.sampling_threshold = sampling_threshold
        self.filtering_threshold = filtering_threshold

    @abstractclassmethod
    def execute(self):
        pass
    
    def __call__(self, *args: str, **kargs: str) -> str:
        output = self.execute(*args, **kargs)
        return str(output)

# %% ../nbs/03_api.ipynb 8
class CalculatorAPI(BaseAPI):
    def execute(self, input: str) -> str:
        try:
            return eval(input)
        except:
            return ""

# %% ../nbs/03_api.ipynb 10
class WolframAPI(BaseAPI):
    def __init__(self, *args, api_key: str, **kargs):
        super().__init__(*args, **kargs)
        self.api_key = api_key
        
    def execute(self, input: str) -> str:
        client = wolframalpha.Client(self.api_key)
        res = client.query(input=input)
        return next(res.results).text

class WeatherAPI(BaseAPI):
    def __init__(self, *args, **kargs):
        super().__init__(*args, **kargs)
        #self.api_key = api_key
        #raise NotImplementedError


    #def get_temperature(self, latitude: float, longitude: float) -> int:
    def get_temperature(self, city: str) -> int:
        #client = wolframalpha.Client(self.api_key)
        #res = client.query(input=input)

        # check if city is valid
        def validCity(city: str):
            df = pd.read_csv('../../uscities.csv')
            return (df == city).any().any()
            #return random.random() > 0.5


        # returns the current temperature of the city
        if validCity(city):
            # TODO integrate with weather API
            # weatherAPI.com, api key: ecfeef9758ff455084241925242105
            return random.randint(40, 80)
        else:
            raise ValueError("Invalid city name")

        # command = f"curl -L $(curl -L https://api.weather.gov/points/{latitude},{longitude} | jq --raw-output .properties.forecast) | jq  --raw-output .properties.periods[0].temperature"
        # # print(command)
        # ps = subprocess.Popen(command, shell=True, executable='/bin/bash', stdin=subprocess.DEVNULL,
        #                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # result = ps.stdout.read().decode("utf-8")
        # return int(result)

    def execute(self, input: str) -> str:
        #client = wolframalpha.Client(self.api_key)
        #res = client.query(input=input)
        # now sure how to handle generic string text, when the weatherAPI requires specific inputs
        try:
            return str(self.get_temperature(input))
        except:
            return ""


class LocationAPI(BaseAPI):
    def __init__(self, *args, cities_csv: str, **kargs):
        super().__init__(*args, **kargs)
        df = pd.read_csv(cities_csv)
        #self.api_key = api_key
        #raise NotImplementedError


    # #def get_temperature(self, latitude: float, longitude: float) -> int:
    # def get_state(self, city: str) -> int:
    #     #client = wolframalpha.Client(self.api_key)
    #     #res = client.query(input=input)

        # check if city is valid
    #def validCity(city: str):

        # # returns the current temperature of the city
        # if validCity(city):
        #     # weatherAPI.com, api key: ecfeef9758ff455084241925242105
        #     return random.randint(40, 80)
        # else:
        #     raise ValueError("Invalid city name")

        # command = f"curl -L $(curl -L https://api.weather.gov/points/{latitude},{longitude} | jq --raw-output .properties.forecast) | jq  --raw-output .properties.periods[0].temperature"
        # # print(command)
        # ps = subprocess.Popen(command, shell=True, executable='/bin/bash', stdin=subprocess.DEVNULL,
        #                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # result = ps.stdout.read().decode("utf-8")
        # return int(result)

    def execute(self, input: str) -> str:
        #client = wolframalpha.Client(self.api_key)
        #res = client.query(input=input)
        # now sure how to handle generic string text, when the weatherAPI requires specific inputs
        # return (df == city).any().any()
        # return random.random() > 0.5
        result = df.loc[:, ['city', 'state_name']][df['city'] == "Baltimore"]
        # return result.size
        if result.size > 0:
            return result.iloc[0]['state_name']
        else:
            return ""




class SearchAPI(BaseAPI):
    def __init__(self, *args, api_key: str, **kargs):
        super().__init__(*args, **kargs)
        #self.api_key = api_key
        raise NotImplementedError
